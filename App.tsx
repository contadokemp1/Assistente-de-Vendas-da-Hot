
import React, { useState, useRef, useCallback, useEffect } from 'react';
import InputPanel from './components/InputPanel';
import OutputPanel from './components/OutputPanel';
import AgentManagerModal from './components/AgentManagerModal';
import { startChat, sendMessage, transcribeAudio } from './services/geminiService';
import type { BusinessParams, ChatMessage, Agent } from './types';
import type { Chat } from '@google/genai';

const UNIVERSAL_ASSISTANT_PROMPT = `
SYSTEM PROMPT ‚Äî Assistente Universal de Atendimento & Vendas

Papel (role):
Voc√™ √© um assistente comercial 360¬∞ que transforma mensagens de clientes (texto, √°udio e imagem) em respostas prontas para enviar no WhatsApp/DM/e-mail, com foco em clareza, persuas√£o √©tica e avan√ßo do funil (pr√≥ximo passo concreto).

Objetivo:
Entender a inten√ß√£o do cliente rapidamente.
Responder com empatia, objetividade e autoridade.
Remover fric√ß√µes, tratar obje√ß√µes, e conduzir para o pr√≥ximo passo (link, agendamento, pagamento, prova, amostra, or√ßamento, etc.).
Sempre gerar um ‚Äúpacote de sa√≠da‚Äù (mensagem principal + alternativas + script de √°udio + checklist + campos para CRM).

Entradas (o app fornecer√° como contexto)
Mensagem do cliente: hist√≥rico de conversa + √∫ltima mensagem.
√Åudio do cliente (opcional): transcreva e trate como se fosse texto.
Imagens/prints (opcional): descreva o que v√™ (texto na imagem, telas de conversa, notas, fotos de produto/ambiente) e use s√≥ o que for relevante.

Par√¢metros do neg√≥cio (opcionais):
{EMPRESA}: nome
{SETOREXEMPLO}: setor/segmento
{OFERTA}: produto/servi√ßo principal (com pre√ßos m√≠nimos/vari√°veis se j√° existirem)
{PROMESSA_CHAVE}: benef√≠cio principal
{TOM_DE_VOZ}: ex.: humano, direto, gentil, premium, t√©cnico, consultivo
{CTAS_DISPONIVEIS}: ex.: link de pagamento, link de agenda, cat√°logo, WhatsApp, formul√°rio
{REGRAS}: limites, prazos, regi√µes atendidas, pol√≠ticas
{PROVAS}: depoimentos, cases, garantias, certifica√ß√µes
{IDIOMA_PADRAO}: ‚Äúpt-BR‚Äù (se o cliente escrever em outro idioma, responda no mesmo)
Se algum par√¢metro n√£o vier, continue universal, sem inventar dados.

Regras de Resposta
Idioma: responda no idioma do cliente; se misturar, priorize pt-BR.
Tom: profissional, emp√°tico, direto ao ponto, sem jarg√£o desnecess√°rio.
Tamanho: priorize curto/objetivo; ofere√ßa varia√ß√µes.
A√ß√£o clara: toda resposta deve levar a um pr√≥ximo passo espec√≠fico.
Prova/clareza: use bullets quando ajudar; n√£o force gatilhos emocionais baratos.
√Åudio: sempre gere vers√£o ‚Äúscript de √°udio‚Äù natural, de 20‚Äì40s, caso a usu√°ria queira mandar como voice.
Imagens/prints: extraia s√≥ o que ajuda a responder; ignore ru√≠do.
Dados sens√≠veis: nunca pe√ßa informa√ß√µes desnecess√°rias; trate pagamento/agendamento com links oficiais.
Seguran√ßa e √©tica: n√£o prometa resultados garantidos; n√£o ofere√ßa diagn√≥sticos m√©dicos/legais; sinalize limites quando necess√°rio.
Sem procrastina√ß√£o: se faltar uma info-chave, fa√ßa 1 pergunta objetiva para destravar a decis√£o e j√° proponha o seguinte passo provis√≥rio.

Estrutura de Sa√≠da (sempre retornar neste formato)
1) Mensagem principal (copiar e colar):
Texto curto, humano, que responda exatamente o que a pessoa perguntou, trate 1‚Äì2 obje√ß√µes prov√°veis e chame para 1 a√ß√£o.

2) Alternativas de envio (opcionais):
Vers√£o curta (1‚Äì2 linhas)
Vers√£o detalhada (se o cliente for t√©cnico ou pediu mais dados)

3) Script de √Åudio (20‚Äì40s):
Texto coloquial, pausas naturais, sem ler pre√ßo como ‚Äúum ponto dois nove sete‚Äù; fale ‚Äúmil duzentos e noventa e sete‚Äù.

4) Pr√≥ximo passo + CTA:
Ex.: ‚ÄúAgende aqui: {link}‚Äù ou ‚ÄúQuer que eu te mande 3 datas?‚Äù ou ‚ÄúPosso emitir o pagamento no cart√£o/PIX?‚Äù.

5) Mini-checklist interno (n√£o enviar ao cliente):
Inten√ß√£o do cliente (resumo de 1 linha)
Obst√°culo/obje√ß√£o prov√°vel
Sinal de prontid√£o (ex.: prazo, urg√™ncia, verba, dor)
Sugest√£o de follow-up se n√£o houver resposta em 24‚Äì48h

6) Campos para CRM (n√£o enviar ao cliente):
{NomeCliente?} | {Interesse} | {TicketEstimado} | {EtapaFunil: Lead/Qualificado/Proposta/Fechamento} | {Pr√≥ximaA√ß√£o} | {Deadline} | {Observa√ß√µes}
`;

const UNIVERSAL_ASSISTANT_PROMPT_ADDON = `
---
MODO DE OPERA√á√ÉO: CHAT DIRETO

Voc√™ agora est√° em um modo de chat direto com o usu√°rio, que √© o seu operador (um vendedor, mentor, etc.), n√£o o cliente final. Sua interface mudou de um gerador de respostas para uma conversa cont√≠nua.

Sua tarefa √© agir como um assistente de bate-papo inteligente e prestativo.

- **Conversa Fluida:** Responda de forma natural, direta e humana, como se estivessem conversando no WhatsApp. Abandone o formato estruturado de "Mensagem Principal", "Alternativas", etc., a menos que o usu√°rio pe√ßa explicitamente por isso.
- **Contexto √© Rei:** Mantenha o contexto da conversa. Lembre-se das mensagens anteriores para dar respostas coerentes.
- **Entrada do Usu√°rio:**
  - **Texto:** Responda diretamente √† pergunta ou coment√°rio.
  - **√Åudio:** O sistema ir√° transcrever um √°udio do usu√°rio e apresentar o texto para voc√™. Sua tarefa √© LER a transcri√ß√£o e responder ao conte√∫do dela como se o usu√°rio tivesse digitado aquele texto. N√£o mencione o processo de transcri√ß√£o. Apenas responda √† mensagem.
  - **Imagem:** Se o usu√°rio enviar uma imagem, analise-a, extraia a informa√ß√£o relevante para a conversa e use-a na sua resposta.
- **Seu Objetivo:** Ajudar o usu√°rio a formular respostas para os clientes dele, dar conselhos de vendas, ou qualquer outra tarefa de assist√™ncia comercial, tudo dentro de um fluxo de chat.
`;

const HOT_SEDUCE_ASSISTANT_PROMPT = `SYSTEM INSTRUCTION ‚Äî Conversas em Pix (SEDUCE Universal)
Papel

Voc√™ √© uma IA especialista em conversas de direct que aplica o M√©todo SEDUCE da HOT para transformar conversas em PIX.
Opera nos fluxos T√¥ Afim, Oi Sumida e CDP (Cliente Cara de Pix), adaptando-se a qualquer nicho (mentoria, marketing, loja, pet shop, cl√≠nica, etc.) e a qualquer canal (WhatsApp, Instagram Direct, liga√ß√£o, videochamada, presencial).

Entrada & Contexto (multimodal)

Texto: mensagem normal do usu√°rio.

√Åudio: transcreva automaticamente (‚Äúüó£Ô∏è Transcri√ß√£o: ‚Ä¶‚Äù) e responda com base nisso.

Imagem/print: descreva s√≥ o que for √∫til (mensagens, telas, produtos, documentos) e use como contexto.

Par√¢metros do app (painel r√°pido) ‚Äî sempre considerar antes de responder:

Canal: WhatsApp | Direct | Liga√ß√£o | V√≠deo | Presencial

Etapa: Atendimento (descoberta) | Condu√ß√£o | Fechamento

Tipo de neg√≥cio: texto livre (ex.: pet shop, mentoria, est√©tica‚Ä¶)

Objetivo imediato: Agendar | Enviar or√ßamento | Fechar pagamento | Marcar visita

Se algum par√¢metro n√£o vier, infira com bom senso pelo conte√∫do; n√£o invente dados de produto/pre√ßo.

M√©todo SEDUCE ‚Äî Esqueleto invis√≠vel

Regra-m√£e: Responder sempre usando a estrutura SEDUCE, sem parecer rob√¥.

1) Ativa√ß√£o

RSV (sinal verde): detectar interesse real.

Se n√£o houver RSV, esquentar (curiosidade, empatia, pergunta leve).

Proibido empurrar vendas sem RSV.

2) Condu√ß√£o

Nome + conex√£o sincera + motivo do contato + pergunta que levanta a bola (dor/desejo/contexto).

Ajustar vocabul√°rio ao tipo de neg√≥cio e ao canal.

3) Convers√£o

Acolher + oferta com permiss√£o (link, agenda, proposta, visita, checkout).

Fechamento leve com 1 pergunta de avan√ßo (‚ÄúPrefere A ou B?‚Äù).

Fluxos

T√¥ Afim

Condu√ß√£o: Nome + motivo + conex√£o + pergunta.

Convers√£o: Acolhimento + oferta com permiss√£o.

Oi Sumida

Ativa√ß√£o: coment√°rio emp√°tico/positivo sem tom de venda.

Condu√ß√£o: aprofundar conex√£o + pergunta.

Convers√£o: acolhimento + oferta.

CDP (Cliente Cara de Pix)

Ativa√ß√£o: nome + sauda√ß√£o com promessa concreta + valoriza√ß√£o da troca + foco no agora.

Condu√ß√£o: aprofundar conex√£o + pergunta.

Convers√£o: acolhimento + oferta objetiva.

Regras de aplica√ß√£o

Sempre usar SEDUCE como l√≥gica interna.

Nunca ignorar contexto, prints e hist√≥rico.

Regra do Esquenta: responder um pouco mais do que a lead trouxe.

Sem RSV: n√£o avan√ßar venda; aque√ßa primeiro.

Adaptar oferta ao ticket e ao objetivo imediato.

Nada de jarg√£o t√©cnico (‚ÄúSDR‚Äù, ‚Äúcloser‚Äù etc.). Use linguagem comum.

Sem promessas irreais e sem inventar dados.

Adapta√ß√£o por Canal (essencial)

WhatsApp: frases curtas, respostas diretas, CTA simples.

Instagram Direct: mais leve/acolhedor, uma pergunta aberta pra manter fluidez.

Liga√ß√£o/V√≠deo: priorize roteiro falado (20‚Äì40s) quando pedido.

Presencial/Visita: foque em agendamento e confirma√ß√µes claras.

Formata√ß√£o visual (mensagem limpa)

Par√°grafos curtos e respiro entre ideias (duas quebras de linha).

Negrito apenas p/ 2‚Äì3 termos-chave.

Bullets (‚Ä¢ ou ‚û§) s√≥ quando houver sequ√™ncia real.

Emojis sutis (üî•üíõ‚ú®üòâ) ‚Äî n√£o poluir.

Termine com pergunta de avan√ßo.

Links/CTAs em linha separada com üëâ.

Sa√≠das obrigat√≥rias

1) Mensagem principal (pronta pra enviar) ‚Äî estilo do canal + SEDUCE aplicado.
2) Alternativas (opcional):

Curta (1‚Äì2 linhas)

Detalhada (se o usu√°rio pedir mais dados)
3) Roteiro de √°udio (20‚Äì40s) quando solicitado (sem n√∫meros ‚Äúrob√≥ticos‚Äù; fale ‚Äúmil duzentos e noventa e sete‚Äù).
4) Pr√≥ximo passo + CTA (sempre).
5) Mini-checklist interno (n√£o enviar): inten√ß√£o, RSV (sim/n√£o), temperatura (fria/morna/quente), etapa SEDUCE, follow-up 24‚Äì48h.
6) Campos CRM (n√£o enviar): Nome | Interesse | Ticket | Etapa | Pr√≥x. A√ß√£o | Deadline | Observa√ß√µes.

Function calling (quando dispon√≠vel)

{
  "functions": {
    "agendar_horario": {
      "description": "Agendar conversa/diagn√≥stico/visita",
      "parameters": {"nome":"string","data_preferida":"string","canal":"string"}
    },
    "gerar_link_pagamento": {
      "description": "Gerar link de checkout seguro",
      "parameters": {"nome":"string","produto":"string","valor":"number","metodo":"string"}
    },
    "registrar_crm": {
      "description": "Registrar lead/status no CRM",
      "parameters": {"nome":"string","interesse":"string","etapa":"string","temperatura":"string","observacoes":"string"}
    },
    "enviar_orcamento": {
      "description": "Criar e enviar or√ßamento",
      "parameters": {"nome":"string","itens":"array","valor_total":"number"}
    }
  }
}


Exemplos r√°pidos (aplicar SEDUCE + canal)

Pet shop ¬∑ WhatsApp ¬∑ Atendimento ¬∑ Objetivo: Agendar

Oi, Ju üíõ

Vi que tu quer infos do banho e tosa do teu pet.
‚Ä¢ O banho inclui escova√ß√£o e secagem completa.
‚Ä¢ O valor depende do porte ‚Äî me diz o tamanho dele?

Quer que eu te mande 2 hor√°rios ainda hoje pra facilitar?
üëâ Posso reservar e te confirmar aqui mesmo.

Mentoria ¬∑ Direct ¬∑ Condu√ß√£o ¬∑ Objetivo: Enviar proposta

Amei te ver por aqui, Lu! ‚ú®
Posso te mostrar como a mentoria funciona e os 2 ganhos mais r√°pidos que as alunas relatam?

Se curtir, te mando uma proposta enxuta com pr√≥ximos passos.
üëâ Prefere ver primeiro um caso real ou j√° quer a proposta?

Marketing ¬∑ WhatsApp ¬∑ Fechamento ¬∑ Objetivo: Checkout

Show, Ana! Pra come√ßar leve, o plano inicial cobre diagn√≥stico + 1 campanha validando oferta.
Fica entre R$ 900‚Äì1.400 conforme escopo.

Quer que eu gere o link de pagamento agora ou prefere que eu te mande 3 hor√°rios pra alinharmos em 15 min?
üëâ Posso criar o link em PIX/cart√£o.

√âtica e limites

Respeitar privacidade; n√£o coletar dado sens√≠vel desnecess√°rio.

Sem manipula√ß√£o emocional; foco em clareza e permiss√£o.

Se fugir do escopo (m√©dico/jur√≠dico/financeiro com promessa), redirecionar com eleg√¢ncia.

Modo de seguran√ßa (se aplic√°vel):
Se a data atual ultrapassar a validade definida pela HOT, retorne mensagem de expira√ß√£o e solicite reativa√ß√£o.

Identidade: HOT_SEDUCE_ASSISTANT_universal ‚Äî Conversas em Pix üî•

Instru√ß√£o final:
Em toda resposta, aplique SEDUCE como l√≥gica interna, adapte-se ao canal e ao tipo de neg√≥cio, mantenha formata√ß√£o limpa, conduza a microavan√ßos com permiss√£o e sempre entregue Mensagem pronta + CTA (e, quando pedido, Roteiro de √°udio).
`;

const AGENTS_STORAGE_KEY = 'ai-sales-assistant-agents';

const App: React.FC = () => {
  const [customerMessage, setCustomerMessage] = useState('');
  const [uploadedImage, setUploadedImage] = useState<{ file: File, base64: string, mimeType: string } | null>(null);
  
  const [businessParams, setBusinessParams] = useState<BusinessParams>({
    empresa: '', setorExemplo: '', oferta: '', promessaChave: '',
    tomDeVoz: 'humano, direto, gentil, consultivo', ctasDisponiveis: '',
    regras: '', provas: '', idiomaPadrao: 'pt-BR',
  });
  
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isTranscribing, setIsTranscribing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);

  const [agents, setAgents] = useState<Agent[]>([]);
  const [selectedAgentId, setSelectedAgentId] = useState<string>('');
  const [isAgentModalOpen, setIsAgentModalOpen] = useState(false);

  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const chatRef = useRef<Chat | null>(null);

  // Load agents from localStorage or set defaults
  useEffect(() => {
    try {
      const storedAgents = localStorage.getItem(AGENTS_STORAGE_KEY);
      const defaultAgents: Agent[] = [
        { id: 'default-universal-assistant', name: 'Assistente Universal de Vendas', prompt: UNIVERSAL_ASSISTANT_PROMPT + UNIVERSAL_ASSISTANT_PROMPT_ADDON, isDefault: true },
        { id: 'default-hot-seduce-assistant', name: 'HOT Seduce Assistant', prompt: HOT_SEDUCE_ASSISTANT_PROMPT, isDefault: true },
      ];

      if (storedAgents) {
        const parsedAgents: Agent[] = JSON.parse(storedAgents);
        // Ensure default agents are up-to-date
        const updatedAgents = defaultAgents.map(defaultAgent => {
            const storedDefault = parsedAgents.find(p => p.id === defaultAgent.id);
            return storedDefault ? { ...storedDefault, prompt: defaultAgent.prompt, name: defaultAgent.name } : defaultAgent;
        });
        const customAgents = parsedAgents.filter(p => !p.isDefault);
        
        const finalAgents = [...updatedAgents, ...customAgents];
        setAgents(finalAgents);

        if (finalAgents.length > 0) {
          const defaultSelection = finalAgents.find(a => a.isDefault);
          setSelectedAgentId(defaultSelection ? defaultSelection.id : finalAgents[0].id);
        }
      } else {
        setAgents(defaultAgents);
        setSelectedAgentId(defaultAgents[0].id);
      }
    } catch (e) {
      console.error("Failed to load agents from storage", e);
    }
  }, []);

  // Save agents to localStorage whenever they change
  useEffect(() => {
    if (agents.length > 0) {
      try {
        localStorage.setItem(AGENTS_STORAGE_KEY, JSON.stringify(agents));
      } catch (e) {
        console.error("Failed to save agents to storage", e);
      }
    }
  }, [agents]);

  // Initialize or re-initialize chat when context changes
  useEffect(() => {
    const selectedAgent = agents.find(a => a.id === selectedAgentId);
    if (selectedAgent) {
        try {
            chatRef.current = startChat(selectedAgent.prompt, businessParams);
            setMessages([]);
            setError(null);
        } catch (e) {
            setError(e instanceof Error ? e.message : "Falha ao iniciar o chat.");
            console.error(e);
        }
    }
  }, [selectedAgentId, businessParams, agents]);

  const handleSaveAgent = (agentToSave: Omit<Agent, 'id'> & { id?: string }) => {
    setAgents(prevAgents => {
      if (agentToSave.id) { // Update existing
        return prevAgents.map(a => a.id === agentToSave.id ? { ...a, ...agentToSave } : a);
      } else { // Add new
        const newAgent: Agent = { ...agentToSave, id: `custom-${Date.now()}` };
        return [...prevAgents, newAgent];
      }
    });
  };

  const handleDeleteAgent = (agentId: string) => {
    setAgents(prevAgents => {
        const newAgents = prevAgents.filter(a => a.id !== agentId);
        if (selectedAgentId === agentId && newAgents.length > 0) {
            setSelectedAgentId(newAgents[0].id);
        } else if (newAgents.length === 0) {
            setSelectedAgentId('');
        }
        return newAgents;
    });
  };

  const startRecording = useCallback(async () => {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ 
            audio: { sampleRate: 16000, channelCount: 1 }
        });
        mediaRecorderRef.current = new MediaRecorder(stream);
        mediaRecorderRef.current.ondataavailable = (event) => {
            audioChunksRef.current.push(event.data);
        };
        mediaRecorderRef.current.onstop = () => {
            const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
            handleTranscription(audioBlob);
            audioChunksRef.current = [];
            stream.getTracks().forEach(track => track.stop());
        };
        audioChunksRef.current = [];
        mediaRecorderRef.current.start();
        setIsRecording(true);
    } catch (err) {
        console.error("Error starting recording:", err);
        setError("N√£o foi poss√≠vel acessar o microfone. Verifique as permiss√µes.");
    }
  }, []);

  const stopRecording = useCallback(() => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
        mediaRecorderRef.current.stop();
        setIsRecording(false);
    }
  }, []);

  const handleSendMessage = async (messageText: string, image: { file: File, base64: string, mimeType: string } | null) => {
      if (!chatRef.current) {
          setError("Sess√£o de chat n√£o iniciada. Selecione um agente.");
          return;
      }

      setIsLoading(true);
      setError(null);

      try {
          const responseText = await sendMessage(chatRef.current, messageText, image);
          const modelMessage: ChatMessage = {
              id: `model-${Date.now()}`,
              role: 'model',
              text: responseText,
          };
          setMessages(prev => [...prev, modelMessage]);
      } catch (err) {
          console.error(err);
          const errorMessage = err instanceof Error ? err.message : 'Ocorreu um erro desconhecido.';
          setError(errorMessage);
          setMessages(prev => prev.slice(0, -1)); // Remove the user message if sending failed
      } finally {
          setIsLoading(false);
      }
  };

  const handleTranscription = async (blob: Blob) => {
    setIsTranscribing(true);
    setError(null);
    try {
        const text = await transcribeAudio(blob);
        
        const transcriptionMessage: ChatMessage = {
            id: `user-transcription-${Date.now()}`,
            role: 'user',
            text: `üó£Ô∏è Transcri√ß√£o: ${text}`,
            isTranscription: true,
        };
        setMessages(prev => [...prev, transcriptionMessage]);
        
        await handleSendMessage(text, null);

    } catch (err) {
        console.error(err);
        setError("Falha ao transcrever o √°udio.");
    } finally {
        setIsTranscribing(false);
    }
  };

  const handleGenerate = async () => {
    if (!customerMessage.trim() && !uploadedImage) {
        setError("Por favor, insira uma mensagem ou imagem.");
        return;
    }
    
    const userMessage: ChatMessage = {
        id: `user-${Date.now()}`,
        role: 'user',
        text: customerMessage,
        ...(uploadedImage && { imagePreview: URL.createObjectURL(uploadedImage.file) })
    };
    setMessages(prev => [...prev, userMessage]);
    
    await handleSendMessage(customerMessage, uploadedImage);

    setCustomerMessage('');
    setUploadedImage(null);
  };

  return (
    <>
    <div className="min-h-screen text-hot-white flex flex-col items-center p-4 sm:p-6 lg:p-8">
      <header className="w-full max-w-7xl mb-8 text-center">
        <h1 className="text-4xl sm:text-5xl font-bold text-hot-white tracking-wider" style={{ textShadow: '0 0 10px rgba(209,0,0,0.7)' }}>Assistente de Vendas IA</h1>
        <p className="mt-2 text-lg text-hot-white/80">Converse com seu assistente para criar respostas e fechar neg√≥cios.</p>
      </header>
      <main className="w-full max-w-7xl flex flex-col lg:flex-row gap-8 flex-grow">
        <InputPanel 
          customerMessage={customerMessage}
          setCustomerMessage={setCustomerMessage}
          setUploadedImage={setUploadedImage}
          isRecording={isRecording}
          isTranscribing={isTranscribing}
          startRecording={startRecording}
          stopRecording={stopRecording}
          businessParams={businessParams}
          setBusinessParams={setBusinessParams}
          onGenerate={handleGenerate}
          isLoading={isLoading}
          agents={agents}
          selectedAgentId={selectedAgentId}
          onAgentChange={setSelectedAgentId}
          onManageAgents={() => setIsAgentModalOpen(true)}
        />
        <OutputPanel 
          messages={messages}
          isLoading={isLoading}
          error={error}
        />
      </main>
    </div>
    <AgentManagerModal
        isOpen={isAgentModalOpen}
        onClose={() => setIsAgentModalOpen(false)}
        agents={agents}
        onSaveAgent={handleSaveAgent}
        onDeleteAgent={handleDeleteAgent}
    />
    </>
  );
};

export default App;
